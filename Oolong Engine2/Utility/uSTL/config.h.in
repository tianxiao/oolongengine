// config.h
//
// Autogenerated from config.h.in by bsconf.
//

#ifndef CONFIG_H_01E33670634DAAC779EE5FF41CCBB36F
#define CONFIG_H_01E33670634DAAC779EE5FF41CCBB36F

// Define to the one symbol short name of this package.
#define USTL_NAME	"@PACKAGE_NAME@"
// Define to the full name and version of this package.
#define USTL_STRING	"@PACKAGE_NAME@ @PACKAGE_VERSION@"
// Define to the version of this package.
#define USTL_VERSION	0x@LIB_MAJOR@@LIB_MINOR@@LIB_BUILD@
// Define to the address where bug reports for this package should be sent.
#define USTL_BUGREPORT	"@PACKAGE_BUGREPORT@"

/// Define to 1 if you want stream operations to throw exceptions on
/// insufficient data or insufficient space. All these errors should
/// be preventable in output code; the input code should verify the
/// data in a separate step. It slows down stream operations a lot,
/// but it's your call. By default only debug builds throw.
///
#undef WANT_STREAM_BOUNDS_CHECKING

#if !defined(WANT_STREAM_BOUNDS_CHECKING) && !defined(NDEBUG)
    #define WANT_STREAM_BOUNDS_CHECKING 1
#endif

/// Define to 1 if you want to build without libstdc++
#undef WITHOUT_LIBSTDCPP

/// Define GNU extensions if unavailable.
#ifndef __GNUC__
    /// GCC (and some other compilers) define '__attribute__'; ustl is using this
    /// macro to alert the compiler to flag inconsistencies in printf/scanf-like
    /// function calls.  Just in case '__attribute__' isn't defined, make a dummy.
    /// 
    #ifndef __attribute__
	#define __attribute__(p)
    #endif
#endif
#if defined(__GNUC__) && __GNUC__ >= 4
    #define DLL_EXPORT		__attribute__((visibility("default")))
    #define DLL_LOCAL		__attribute__((visibility("hidden")))
#else
    #define DLL_EXPORT
    #define DLL_LOCAL
#endif
#if defined(__GNUC__) && __GNUC__ >= 3 && __i386__
    /// GCC 3+ supports the prefetch directive, which some CPUs use to improve caching
    #define prefetch(p,rw,loc)	__builtin_prefetch(p,rw,loc)
#else
    #define prefetch(p,rw,loc)
#endif
#if !defined(__GNUC__) || __GNUC__ < 3
    /// __alignof__ returns the recommended alignment for the type
    #define __alignof__(v)	min(sizeof(v), sizeof(void*))
    /// This macro returns 1 if the value of x is known at compile time.
    #ifndef __builtin_constant_p(x)
	#define __builtin_constant_p(x)	0
    #endif
#endif

/// Define to 1 if you have the `atexit' function.
#undef HAVE_ATEXIT

/// Define to 1 if you have the <assert.h> header file.
#undef HAVE_ASSERT_H

/// Define to 1 if you have the <ctype.h> header file.
#undef HAVE_CTYPE_H

/// Define to 1 if you have the <errno.h> header file.
#undef HAVE_ERRNO_H

/// Define to 1 if you have the <fcntl.h> header file.
#undef HAVE_FCNTL_H

/// Define to 1 if you have the <float.h> header file.
#undef HAVE_FLOAT_H

/// Define to 1 if you have the <inttypes.h> header file.
#undef HAVE_INTTYPES_H

/// Define to 1 if you have the <limits.h> header file.
#undef HAVE_LIMITS_H

/// Define to 1 if you have the <locale.h> header file.
#undef HAVE_LOCALE_H

/// Define to 1 if your system has a working `malloc' function.
#undef HAVE_MALLOC

// Define to 1 if you have the <malloc.h> header file.
#undef HAVE_MALLOC_H

// Define to 1 if you have the <alloca.h> header file.
#undef HAVE_ALLOCA_H

// Define to 1 if you have the `memchr' function.
#undef HAVE_MEMCHR

// Define to 1 if you have the `memmove' function.
#undef HAVE_MEMMOVE

// Define to 1 if you have the <memory.h> header file.
#undef HAVE_MEMORY_H

// Define to 1 if you have the `memset' function.
#undef HAVE_MEMSET

// Define to 1 if the system has the type `ptrdiff_t'.
#undef HAVE_PTRDIFF_T

// Define to 1 if you have the <signal.h> header file.
#undef HAVE_SIGNAL_H

// Define to 1 if you have the __va_copy function
#undef HAVE_VA_COPY

// Define to 1 if `stat' has the bug that it succeeds when given the
// zero-length file name argument.
#undef HAVE_STAT_EMPTY_STRING_BUG

// Define to 1 if you have the <stdarg.h> header file.
#undef HAVE_STDARG_H

// Define to 1 if you have the <stddef.h> header file.
#undef HAVE_STDDEF_H

// Define to 1 if you have the <stdint.h> header file.
#undef HAVE_STDINT_H

// Define to 1 if you have the <stdio.h> header file.
#undef HAVE_STDIO_H

// Define to 1 if you have the <stdlib.h> header file.
#undef HAVE_STDLIB_H

// Define to 1 if you have the `strerror' function.
#undef HAVE_STRERROR

// Define to 1 if you have the <strings.h> header file.
#undef HAVE_STRINGS_H

// Define to 1 if you have the <string.h> header file.
#undef HAVE_STRING_H

// Define to 1 if you have the `strrchr' function.
#undef HAVE_STRRCHR

// Define to 1 if you have the `strsignal' function.
#undef HAVE_STRSIGNAL

// Define to 1 if you have the `strtol' function.
#undef HAVE_STRTOL

// Define to 1 if you have the <sys/stat.h> header file.
#undef HAVE_SYS_STAT_H

// Define to 1 if you have the <sys/types.h> header file.
#undef HAVE_SYS_TYPES_H

// Define to 1 if you have <sys/wait.h> that is POSIX.1 compatible.
#undef HAVE_SYS_WAIT_H

// Define to 1 if you have the <time.h> header file.
#undef HAVE_TIME_H

// Define to 1 if you have the <unistd.h> header file.
#undef HAVE_UNISTD_H

// Define to 1 if you have the <math.h> header file.
#undef HAVE_MATH_H

// Define to 1 if you have the rintf function. Will use rint otherwise.
#undef HAVE_RINTF

// STDC_HEADERS is defined to 1 on sane systems.
#if defined(HAVE_ASSERT_H) && defined(HAVE_CTYPE_H) &&\
    defined(HAVE_ERRNO_H) && defined(HAVE_FLOAT_H) &&\
    defined(HAVE_LIMITS_H) && defined(HAVE_LOCALE_H) &&\
    defined(HAVE_MATH_H) && defined(HAVE_SIGNAL_H) &&\
    defined(HAVE_STDARG_H) && defined(HAVE_STDDEF_H) &&\
    defined(HAVE_STDIO_H) && defined(HAVE_STDLIB_H) &&\
    defined(HAVE_STRING_H) && defined(HAVE_TIME_H)
#define STDC_HEADERS 1
#endif

// STDC_HEADERS is defined to 1 on unix systems.
#if defined(HAVE_FCNTL_H) && defined(HAVE_SYS_STAT_H) && defined(HAVE_UNISTD_H)
#define STDUNIX_HEADERS 1
#endif

// Define to 1 if `lstat' dereferences a symlink specified with a trailing slash.
#undef LSTAT_FOLLOWS_SLASHED_SYMLINK

// Define to 1 if your compiler treats char as a separate type along with
// signed char and unsigned char. This will create overloads for char.
#undef HAVE_THREE_CHAR_TYPES

// Define as the return type of signal handlers (`int' or `void').
#undef RETSIGTYPE

// Define to 1 if you have 64 bit types available
#undef HAVE_INT64_T

// Define to 1 if you have the long long type
#undef HAVE_LONG_LONG

// Define to 1 if you want unrolled specializations for fill and copy
#undef WANT_UNROLLED_COPY

// Define to 1 if you want to use MMX/SSE/3dNow! processor instructions
#undef WANT_MMX

// Define to byte sizes of types
#undef SIZE_OF_CHAR
#undef SIZE_OF_SHORT
#undef SIZE_OF_INT
#undef SIZE_OF_LONG 
#undef SIZE_OF_LONG_LONG
#undef SIZE_OF_POINTER 
#undef SIZE_OF_SIZE_T 
#undef SIZE_OF_BOOL 
#undef SIZE_T_IS_LONG

// Byte order macros, converted in utypes.h
#define USTL_LITTLE_ENDIAN	4321
#define USTL_BIG_ENDIAN		1234
#define USTL_BYTE_ORDER		USTL_@BYTE_ORDER@

// Extended CPU capabilities
#undef CPU_HAS_FPU
#undef CPU_HAS_EXT_DEBUG
#undef CPU_HAS_TIMESTAMPC
#undef CPU_HAS_MSR
#undef CPU_HAS_CMPXCHG8
#undef CPU_HAS_APIC
#undef CPU_HAS_SYSCALL
#undef CPU_HAS_MTRR
#undef CPU_HAS_CMOV
#undef CPU_HAS_FCMOV
#if WANT_MMX
#undef CPU_HAS_MMX
#undef CPU_HAS_FXSAVE
#undef CPU_HAS_SSE 
#undef CPU_HAS_SSE2
#undef CPU_HAS_SSE3
#undef CPU_HAS_EXT_3DNOW
#undef CPU_HAS_3DNOW
#endif

// GCC vector extensions
#if defined(CPU_HAS_MMX) || defined(CPU_HAS_SSE)
    #undef HAVE_VECTOR_EXTENSIONS
#endif

#if CPU_HAS_SSE && defined(__GNUC__)
    #define __sse_align	__attribute__((aligned(16)))
#else
    #define __sse_align	
#endif

// Define to empty if `const' does not conform to ANSI C.
#undef const

// Define as `__inline' if that's what the C compiler calls it, or to nothing
// if it is not supported.
#undef inline

// Define to `long' if <sys/types.h> does not define.
#undef off_t

// Define to `unsigned' if <sys/types.h> does not define.
#undef size_t

#endif	// CONFIG_H_01E33670634DAAC779EE5FF41CCBB36F

